# GitHub Actions 工作流名称
name: Deploy VitePress Site to GitHub Pages

on:
  # 当你向 master 分支推送代码时触发
  push:
    branches: [master] # 注意：如果你的主分支是 main，请将这里改成 main

  # 允许你手动在 Actions 页面触发此工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以便部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过排队中的运行，但正在进行的运行除外
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout # 步骤1：拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 如果使用 git-based 的最后更新时间功能，此项是必需的
      
      - name: Setup Node.js # 步骤2：设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 18 # 指定 Node.js 版本，18.x 是一个稳定的选择
          cache: npm # 使用 npm 的缓存

      - name: Setup Pages # 步骤3：设置 GitHub Pages
        uses: actions/configure-pages@v4

      - name: Install dependencies # 步骤4：安装项目依赖
        run: npm install

      - name: Build with VitePress # 步骤5：构建静态网站文件
        node node_modules/vitepress/bin/vitepress.js build
        #run: npm run docs:build # 使用 npx 来执行 vitepress 命令令

      - name: Upload artifact # 步骤6：上传构建产物
        uses: actions/upload-pages-artifact@v3
        with:
          # 从 VitePress 默认的构建输出目录上传
          path: .vitepress/dist

  # 部署任务
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build # 依赖于 build 任务成功完成
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages # 步骤7：部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4